[{"L:\\react\\my own projects\\blood-donar_frontend\\src\\index.js":"1","L:\\react\\my own projects\\blood-donar_frontend\\src\\App.js":"2","L:\\react\\my own projects\\blood-donar_frontend\\src\\reportWebVitals.js":"3","L:\\react\\my own projects\\blood-donar_frontend\\src\\hoc\\AuthContextProvider.js":"4","L:\\react\\my own projects\\blood-donar_frontend\\src\\hoc\\Layout\\Layout.js":"5","L:\\react\\my own projects\\blood-donar_frontend\\src\\containers\\BloodBanks\\BloodBanks.js":"6","L:\\react\\my own projects\\blood-donar_frontend\\src\\containers\\Auth\\Auth.js":"7","L:\\react\\my own projects\\blood-donar_frontend\\src\\containers\\Auth\\Spinner\\Spinner.js":"8","L:\\react\\my own projects\\blood-donar_frontend\\src\\shared\\apiCalls.js":"9","L:\\react\\my own projects\\blood-donar_frontend\\src\\shared\\config.js":"10","L:\\react\\my own projects\\blood-donar_frontend\\src\\shared\\localStorageVariables.js":"11"},{"size":726,"mtime":1610044614738,"results":"12","hashOfConfig":"13"},{"size":760,"mtime":1610046129225,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":2819,"mtime":1611659708523,"results":"16","hashOfConfig":"13"},{"size":778,"mtime":1610526112519,"results":"17","hashOfConfig":"13"},{"size":601,"mtime":1610046093249,"results":"18","hashOfConfig":"13"},{"size":14951,"mtime":1611678311315,"results":"19","hashOfConfig":"13"},{"size":198,"mtime":1610131393327,"results":"20","hashOfConfig":"13"},{"size":3232,"mtime":1611661327838,"results":"21","hashOfConfig":"13"},{"size":268,"mtime":1611660736645,"results":"22","hashOfConfig":"13"},{"size":215,"mtime":1611654769767,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"5zd4z5",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"L:\\react\\my own projects\\blood-donar_frontend\\src\\index.js",[],["48","49"],"L:\\react\\my own projects\\blood-donar_frontend\\src\\App.js",[],"L:\\react\\my own projects\\blood-donar_frontend\\src\\reportWebVitals.js",[],"L:\\react\\my own projects\\blood-donar_frontend\\src\\hoc\\AuthContextProvider.js",["50","51","52"],"import React , { useState ,createContext , useEffect , useCallback } from 'react';\r\nlet initialAuthState = {\r\n    token : '',\r\n    username : '',\r\n    userId : '',\r\n    isAuthenticated : false\r\n}\r\nexport const AuthContext = createContext({});\r\nconst AuthContextProvider = (props)=>{\r\n    const [authState , setAuthState ] = useState(initialAuthState)\r\n    const autoTryLogin = useCallback(() =>{\r\n        const token = localStorage.getItem('token')\r\n        if(token){\r\n            const expirationDate = new Date(localStorage.get('expirationDate'));\r\n            const currentDate = new Date();\r\n            if(expirationDate<=currentDate){\r\n                setAuthenticationValues(false);\r\n            }else{\r\n                setAuthState({\r\n                    token ,\r\n                    username : localStorage.getItem('username'),\r\n                    userId : localStorage.getItem('userId'),\r\n                    isAuthenticated : true\r\n                });\r\n                autoLogout((expirationDate.getTime()-currentDate.getTime()));\r\n            }\r\n        }else{\r\n            setAuthenticationValues(false);\r\n        }\r\n    },[]);\r\n   \r\n\r\n    const setAuthenticationValues = (authStatus, authSatePayload)=>{\r\n        let tempAuthState ;\r\n        if(authStatus){\r\n             tempAuthState = {\r\n                token : authSatePayload.token,\r\n                username : authSatePayload.username,\r\n                userId : authSatePayload.userId,\r\n                isAuthenticated : true\r\n            }\r\n            const expirationDate = new Date(new Date().getTime()+authSatePayload.expiresIn);\r\n            localStorage.setItem('token',tempAuthState.token)\r\n            localStorage.setItem('username',tempAuthState.username)\r\n            localStorage.setItem('userId',tempAuthState.userId)\r\n            localStorage.setItem('expirationDate',expirationDate)\r\n            autoLogout(authSatePayload.expiresIn);\r\n        }else{\r\n            tempAuthState = initialAuthState;\r\n            localStorage.removeItem('token')\r\n            localStorage.removeItem('username')\r\n            localStorage.removeItem('userId')\r\n            localStorage.removeItem('expirationDate')\r\n        }\r\n        setAuthState(tempAuthState)\r\n    }\r\n\r\n    const autoLogout = useCallback((millisecs)=>{\r\n        // clearTimeout(logoutTimeout);\r\n        let logoutTimeout = setTimeout(()=>{\r\n            setAuthenticationValues(false)\r\n        },millisecs)\r\n    },[setAuthenticationValues]);\r\n    let contextValue = {\r\n        authState,\r\n        setAuthenticationValues\r\n    }\r\n\r\n    useEffect(()=>{\r\n        autoTryLogin();\r\n    },[autoTryLogin])\r\n\r\n    return (\r\n        <AuthContext.Provider value ={contextValue}>\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    )\r\n\r\n}\r\n\r\nexport default AuthContextProvider;","L:\\react\\my own projects\\blood-donar_frontend\\src\\hoc\\Layout\\Layout.js",[],"L:\\react\\my own projects\\blood-donar_frontend\\src\\containers\\BloodBanks\\BloodBanks.js",[],"L:\\react\\my own projects\\blood-donar_frontend\\src\\containers\\Auth\\Auth.js",[],"L:\\react\\my own projects\\blood-donar_frontend\\src\\containers\\Auth\\Spinner\\Spinner.js",[],"L:\\react\\my own projects\\blood-donar_frontend\\src\\shared\\apiCalls.js",[],"L:\\react\\my own projects\\blood-donar_frontend\\src\\shared\\config.js",[],"L:\\react\\my own projects\\blood-donar_frontend\\src\\shared\\localStorageVariables.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":30,"column":7,"nodeType":"59","endLine":30,"endColumn":9,"suggestions":"60"},{"ruleId":"57","severity":1,"message":"61","line":33,"column":11,"nodeType":"62","endLine":56,"endColumn":6,"suggestions":"63"},{"ruleId":"64","severity":1,"message":"65","line":60,"column":13,"nodeType":"66","messageId":"67","endLine":60,"endColumn":26},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'autoLogout' and 'setAuthenticationValues'. Either include them or remove the dependency array.","ArrayExpression",["70"],"The 'setAuthenticationValues' function makes the dependencies of useCallback Hook (at line 63) change on every render. To fix this, wrap the definition of 'setAuthenticationValues' in its own useCallback() Hook.","VariableDeclarator",["71"],"no-unused-vars","'logoutTimeout' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"72","fix":"73"},{"desc":"74","fix":"75"},"Update the dependencies array to be: [autoLogout, setAuthenticationValues]",{"range":"76","text":"77"},"Wrap the definition of 'setAuthenticationValues' in its own useCallback() Hook.",{"range":"78","text":"79"},[1138,1140],"[autoLogout, setAuthenticationValues]",[1187,2237],"useCallback((authStatus, authSatePayload)=>{\r\n        let tempAuthState ;\r\n        if(authStatus){\r\n             tempAuthState = {\r\n                token : authSatePayload.token,\r\n                username : authSatePayload.username,\r\n                userId : authSatePayload.userId,\r\n                isAuthenticated : true\r\n            }\r\n            const expirationDate = new Date(new Date().getTime()+authSatePayload.expiresIn);\r\n            localStorage.setItem('token',tempAuthState.token)\r\n            localStorage.setItem('username',tempAuthState.username)\r\n            localStorage.setItem('userId',tempAuthState.userId)\r\n            localStorage.setItem('expirationDate',expirationDate)\r\n            autoLogout(authSatePayload.expiresIn);\r\n        }else{\r\n            tempAuthState = initialAuthState;\r\n            localStorage.removeItem('token')\r\n            localStorage.removeItem('username')\r\n            localStorage.removeItem('userId')\r\n            localStorage.removeItem('expirationDate')\r\n        }\r\n        setAuthState(tempAuthState)\r\n    })"]